const fs = require('fs');
const path = require('path');
const OpenAI = require('openai');
require('dotenv').config();

class AudioAnalyzer {
    constructor() {
        this.openai = new OpenAI({
            apiKey: process.env.OPENAI_API_KEY
        });
    }

    async transcribeAudio(audioFilePath) {
        try {
            console.log('–ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ...');
            
            const transcription = await this.openai.audio.transcriptions.create({
                file: fs.createReadStream(audioFilePath),
                model: "whisper-1",
                response_format: "text"
            });

            console.log('–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            return transcription;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:', error.message);
            throw error;
        }
    }

    async generateSummary(transcription) {
        try {
            console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ...');
            
            const summary = await this.openai.chat.completions.create({
                model: "gpt-4.1-mini",
                messages: [
                    {
                        role: "system",
                        content: "You are an expert at creating concise and informative summaries. Create a summary of the text, highlighting the main ideas and key points."
                    },
                    {
                        role: "user",
                        content: `Create a summary of the following text:\n\n${transcription}`
                    }
                ],
                max_tokens: 500,
                temperature: 0.3
            });

            console.log('–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');
            return summary.choices[0].message.content;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è:', error.message);
            throw error;
        }
    }

    async generateAnalytics(transcription) {
        try {
            console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É...');
            
            const analytics = await this.openai.chat.completions.create({
                model: "gpt-4.1-mini",
                messages: [
                    {
                        role: "system",
                        content: `You are an expert at text analysis. Analyze the provided text and return a JSON object with the following data:
                        - word_count: total word count
                        - speaking_speed_wpm: speaking speed (words per minute, assuming average speed of 150 words per minute for audio around 8-10 minutes long)
                        - frequently_mentioned_topics: array of 3+ most frequently mentioned topics with mention count
                        
                        Return only valid JSON without additional text.`
                    },
                    {
                        role: "user",
                        content: `Analyze the following text and create JSON with analytics:\n\n${transcription}`
                    }
                ],
                max_tokens: 1000,
                temperature: 0.1
            });

            console.log('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');
            return JSON.parse(analytics.choices[0].message.content);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error.message);
            throw error;
        }
    }

    saveTranscription(transcription, outputDir) {
        const filename = `transcription.md`;
        const filepath = path.join(outputDir, filename);
        
        const content = `# –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ

**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** ${new Date().toLocaleString('ru-RU')}

## –¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏

${transcription}
`;

        fs.writeFileSync(filepath, content, 'utf8');
        console.log(`–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: ${filename}`);
        return filename;
    }

    saveSummary(summary, outputDir) {
        const filepath = path.join(outputDir, 'summary.md');
        
        const content = `# –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ

**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** ${new Date().toLocaleString('ru-RU')}

## –†–µ–∑—é–º–µ

${summary}
`;

        fs.writeFileSync(filepath, content, 'utf8');
        console.log('–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: summary.md');
    }

    saveAnalytics(analytics, outputDir) {
        const filepath = path.join(outputDir, 'analysis.json');
        
        fs.writeFileSync(filepath, JSON.stringify(analytics, null, 2), 'utf8');
        console.log('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: analysis.json');
    }

    async analyzeAudio(audioFilePath) {
        try {
            // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            const outputDir = path.join(path.dirname(audioFilePath), 'output');
            if (!fs.existsSync(outputDir)) {
                fs.mkdirSync(outputDir, { recursive: true });
            }

            // –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
            const transcription = await this.transcribeAudio(audioFilePath);
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            this.saveTranscription(transcription, outputDir);
            
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
            const summary = await this.generateSummary(transcription);
            this.saveSummary(summary, outputDir);
            
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            const analytics = await this.generateAnalytics(transcription);
            this.saveAnalytics(analytics, outputDir);

            // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
            console.log('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê ===\n');
            console.log('üìù –ö–†–ê–¢–ö–û–ï –°–û–î–ï–†–ñ–ê–ù–ò–ï:');
            console.log(summary);
            console.log('\nüìä –ê–ù–ê–õ–ò–¢–ò–ö–ê:');
            console.log(JSON.stringify(analytics, null, 2));

            return {
                transcription,
                summary,
                analytics
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞—É–¥–∏–æ:', error.message);
            throw error;
        }
    }
}

module.exports = AudioAnalyzer; 